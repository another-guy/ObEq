{
  "name": "ObEq",
  "tagline": "Quick, easy, and correct implementation of object equality in .NET",
  "body": "ï»¿## Synopsis\r\n\r\nOb[ject]Eq[uality] provides basic implementation for GetHashCode and Equals methods.\r\n\r\n## Code Example\r\n\r\nLet's assume there is a class Sample<T> that has two fields.\r\nIt could be defined this way:\r\n\r\n```cs\r\npublic class Sample<T>\r\n{\r\n    private T field1;\r\n    private int field2;\r\n\r\n    // Constructor(s)...\r\n\r\n\t// Other methods and properties...\r\n}\r\n```\r\n\r\nIf we need this class to implement GetHashCode() and Equals() methods, it could be easily achieved using ObEq's EqualityHelper class.\r\n\r\nFirst, the EqualityMembers property refers to all fields that should be used as equality members.\r\nThen, the Equals() and GetHashCode() delegate result calculation to EqualityHelper by passing it the EqualityMembers as an argument.\r\n\r\nNotice that EqualityHelper::CalculateReferentialEquals(object1, object2) is used to check whether the references are same or not;\r\nwhereas EqualityHelper::CalculateEquals(equalityMembers1. equalityMembers2) is the method that does the actual fieldwise comparison for two objects.\r\n\r\n```cs\r\nprivate object[] EqualityMembers => new[] { field1, field2 };\r\n\r\nprotected bool Equals(Sample<T> other)\r\n{\r\n\treturn EqualityHelper.CalculateEquals(this.EqualityMembers, other.EqualityMembers);\r\n}\r\n\r\npublic override bool Equals(object other)\r\n{\r\n\tvar referenceEqualityResult = EqualityHelper.CalculateReferentialEquals(this, other);\r\n\treturn referenceEqualityResult ??\r\n\t\tEqualityHelper.CalculateEquals(this.EqualityMembers, ((Sample<T1>)other).EqualityMembers);\r\n}\r\n\r\npublic override int GetHashCode()\r\n{\r\n\treturn EqualityHelper.CalculateHashCode(EqualityMembers);\r\n}\r\n```\r\n\r\n## References\r\n\r\nMSDN page about hash code: https://msdn.microsoft.com/en-us/library/system.string.gethashcode(v=vs.110).aspx\r\nMSDN page about equals: https://msdn.microsoft.com/en-us/library/ms173147(v=vs.80).aspx\r\n\r\n## Installation\r\n\r\nObEq is a available in a form of a NuGet package.\r\nFollow regular installation process to bring it to your project.\r\nhttps://www.nuget.org/packages/ObEq/\r\n\r\n## Tests\r\n\r\nUnit tests are available in ObEq.Tests project.\r\n\r\n## License\r\n\r\nThe code is distributed under the MIT license.\r\n\r\n## Contributing\r\n\r\nContribution is the best way to improve any project!\r\n\r\n1. Fork it!\r\n2. Create your feature branch (```git checkout -b my-new-feature```).\r\n3. Commit your changes (```git commit -am 'Added some feature'```)\r\n4. Push to the branch (```git push origin my-new-feature```)\r\n5. Create new Pull Request\r\n\r\n...or follow steps described in a nice [fork guide](http://kbroman.org/github_tutorial/pages/fork.html) by Karl Broman\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}